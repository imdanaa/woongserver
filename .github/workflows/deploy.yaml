name: Deploy Spring Boot App to ECS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: woongserverecs
  ECS_TASK_DEFINITION: ./task-definition.json
  CONTAINER_NAME: woongserver
  ECS_SERVICE: springbootserver
  ECS_CLUSTER: woongservercluster
  DB_URL: ${{ secrets.DB_URL }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.secrets.DB_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: DockerHub Upload
        env:
          NAME: ${{ secrets.DOCKERHUB_USERNAME}}
          REPO: woongserver
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:$IMAGE_TAG
          docker push $NAME/$REPO:$IMAGE_TAG

      - name: AWS Role을 이용한 로그인
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::124355662149:role/woongserver_role
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      # ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      # 이미지를 빌드하고 ECR에 푸시
      - name: build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/woongserverecs:$IMAGE_TAG .
          docker push $ECR_REGISTRY/woongserverecs:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/woongserverecs:$IMAGE_TAG" >> $GITHUB_OUTPUT

      #푸시된 이미지를 가지고 ECS 서비스 재시작
      - name: Fill in the new Image in the ECS task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
